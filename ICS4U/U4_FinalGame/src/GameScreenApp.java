

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Saksham
 */
public class GameScreenApp extends javax.swing.JFrame {

    DecimalFormat x = new DecimalFormat("##,###,###.##");  //Displays users' balance in a more readable format
    static int[] coordinates = {11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77};
    static ArrayList<Player> players = PlayerSelectApp.tempPlayers; //Accesses the list of players which was declared in PlayerSelectApp
    static House arrHouses[] = new House[49]; //Creates an array which will contain the information of all 49 properties on the board
    static int turn = (int) (Math.random() * PlayerSelectApp.playerCount) + 1; //Declares and randomly initializes the variable that will keep track of who's turn it is

    public GameScreenApp() {
        initComponents();
        startSetup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

 lblTitle = new javax.swing.JLabel();
 lblHouse1 = new javax.swing.JLabel();
 lblHouse2 = new javax.swing.JLabel();
 lblHouse3 = new javax.swing.JLabel();
 lblHouse4 = new javax.swing.JLabel();
 lblHouse5 = new javax.swing.JLabel();
 lblHouse6 = new javax.swing.JLabel();
 lblHouse7 = new javax.swing.JLabel();
 lblHouse8 = new javax.swing.JLabel();
 lblHouse9 = new javax.swing.JLabel();
 lblHouse10 = new javax.swing.JLabel();
 lblHouse11 = new javax.swing.JLabel();
 lblHouse12 = new javax.swing.JLabel();
 lblHouse13 = new javax.swing.JLabel();
 lblHouse14 = new javax.swing.JLabel();
 lblHouse15 = new javax.swing.JLabel();
 lblHouse16 = new javax.swing.JLabel();
 lblHouse17 = new javax.swing.JLabel();
 lblHouse18 = new javax.swing.JLabel();
 lblHouse19 = new javax.swing.JLabel();
 lblHouse20 = new javax.swing.JLabel();
 lblHouse21 = new javax.swing.JLabel();
 lblHouse22 = new javax.swing.JLabel();
 lblHouse23 = new javax.swing.JLabel();
 lblHouse24 = new javax.swing.JLabel();
 lblHouse25 = new javax.swing.JLabel();
 lblHouse26 = new javax.swing.JLabel();
 lblHouse27 = new javax.swing.JLabel();
 lblHouse28 = new javax.swing.JLabel();
 lblHouse29 = new javax.swing.JLabel();
 lblHouse30 = new javax.swing.JLabel();
 lblHouse31 = new javax.swing.JLabel();
 lblHouse32 = new javax.swing.JLabel();
 lblHouse33 = new javax.swing.JLabel();
 lblHouse34 = new javax.swing.JLabel();
 lblHouse35 = new javax.swing.JLabel();
 lblHouse36 = new javax.swing.JLabel();
 lblHouse37 = new javax.swing.JLabel();
 lblHouse38 = new javax.swing.JLabel();
 lblHouse39 = new javax.swing.JLabel();
 lblHouse40 = new javax.swing.JLabel();
 lblHouse41 = new javax.swing.JLabel();
 lblHouse42 = new javax.swing.JLabel();
 lblHouse43 = new javax.swing.JLabel();
 lblHouse44 = new javax.swing.JLabel();
 lblHouse45 = new javax.swing.JLabel();
 lblHouse46 = new javax.swing.JLabel();
 lblHouse47 = new javax.swing.JLabel();
 lblHouse48 = new javax.swing.JLabel();
 lblHouse49 = new javax.swing.JLabel();
 scrlPlayerCard1 = new javax.swing.JScrollPane();
 pnlPlayerCard1 = new javax.swing.JPanel();
 lblNameP1 = new javax.swing.JLabel();
 lblBalanceP1 = new javax.swing.JLabel();
 lblPropertiesTitleP1 = new javax.swing.JLabel();
 jScrollPane1 = new javax.swing.JScrollPane();
 txtAreaHouseListP1 = new javax.swing.JTextArea();
 scrlPlayerCard2 = new javax.swing.JScrollPane();
 pnlPlayerCard2 = new javax.swing.JPanel();
 lblNameP2 = new javax.swing.JLabel();
 lblBalanceP2 = new javax.swing.JLabel();
 lblPropertiesTitleP2 = new javax.swing.JLabel();
 jScrollPane2 = new javax.swing.JScrollPane();
 txtAreaHouseListP2 = new javax.swing.JTextArea();
 scrlPlayerCard3 = new javax.swing.JScrollPane();
 pnlPlayerCard3 = new javax.swing.JPanel();
 lblNameP3 = new javax.swing.JLabel();
 lblBalanceP3 = new javax.swing.JLabel();
 lblPropertiesTitleP3 = new javax.swing.JLabel();
 jScrollPane3 = new javax.swing.JScrollPane();
 txtAreaHouseListP3 = new javax.swing.JTextArea();
 lblOutput = new javax.swing.JLabel();
 btnBuy = new javax.swing.JButton();
 btnSell = new javax.swing.JButton();
 btnEndTurn = new javax.swing.JButton();
 scrlPlayerCard4 = new javax.swing.JScrollPane();
 pnlPlayerCard4 = new javax.swing.JPanel();
 lblNameP4 = new javax.swing.JLabel();
 lblBalanceP4 = new javax.swing.JLabel();
 lblPropertiesTitleP4 = new javax.swing.JLabel();
 jScrollPane4 = new javax.swing.JScrollPane();
 txtAreaHouseListP4 = new javax.swing.JTextArea();

 setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

 lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
 lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblTitle.setText("Monopoly Beta");
 lblTitle.setOpaque(true);

 lblHouse1.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse1.setText("1,1");
 lblHouse1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse1.setOpaque(true);

 lblHouse2.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse2.setText("2,1");
 lblHouse2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse2.setOpaque(true);

 lblHouse3.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse3.setText("3,1");
 lblHouse3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse3.setOpaque(true);

 lblHouse4.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse4.setText("3,2");
 lblHouse4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse4.setOpaque(true);

 lblHouse5.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse5.setText("2,2");
 lblHouse5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse5.setOpaque(true);

 lblHouse6.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse6.setText("1,2");
 lblHouse6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse6.setOpaque(true);

 lblHouse7.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse7.setText("1,3");
 lblHouse7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse7.setOpaque(true);

 lblHouse8.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse8.setText("2,3");
 lblHouse8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse8.setOpaque(true);

 lblHouse9.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse9.setText("3,3");
 lblHouse9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse9.setOpaque(true);

 lblHouse10.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse10.setText("3,4");
 lblHouse10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse10.setOpaque(true);

 lblHouse11.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse11.setText("2,4");
 lblHouse11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse11.setOpaque(true);

 lblHouse12.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse12.setText("1,4");
 lblHouse12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse12.setOpaque(true);

 lblHouse13.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse13.setText("1,5");
 lblHouse13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse13.setOpaque(true);

 lblHouse14.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse14.setText("2,5");
 lblHouse14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse14.setOpaque(true);

 lblHouse15.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse15.setText("3,5");
 lblHouse15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse15.setOpaque(true);

 lblHouse16.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse16.setText("3,6");
 lblHouse16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse16.setOpaque(true);

 lblHouse17.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse17.setText("2,6");
 lblHouse17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse17.setOpaque(true);

 lblHouse18.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse18.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse18.setText("1,6");
 lblHouse18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse18.setOpaque(true);

 lblHouse19.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse19.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse19.setText("1,7");
 lblHouse19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse19.setOpaque(true);

 lblHouse20.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse20.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse20.setText("2,7");
 lblHouse20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse20.setOpaque(true);

 lblHouse21.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse21.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse21.setText("3,7");
 lblHouse21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse21.setOpaque(true);

 lblHouse22.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse22.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse22.setText(" 4,7");
 lblHouse22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse22.setOpaque(true);

 lblHouse23.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse23.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse23.setText("5,7");
 lblHouse23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse23.setOpaque(true);

 lblHouse24.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse24.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse24.setText("6,7");
 lblHouse24.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse24.setOpaque(true);

 lblHouse25.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse25.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse25.setText("7,7");
 lblHouse25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse25.setOpaque(true);

 lblHouse26.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse26.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse26.setText("7,6");
 lblHouse26.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse26.setOpaque(true);

 lblHouse27.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse27.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse27.setText("6,6");
 lblHouse27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse27.setOpaque(true);

 lblHouse28.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse28.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse28.setText("5,6");
 lblHouse28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse28.setOpaque(true);

 lblHouse29.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse29.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse29.setText("4,6");
 lblHouse29.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse29.setOpaque(true);

 lblHouse30.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse30.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse30.setText("4,5");
 lblHouse30.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse30.setOpaque(true);

 lblHouse31.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse31.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse31.setText("5,5");
 lblHouse31.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse31.setOpaque(true);

 lblHouse32.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse32.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse32.setText("6,5");
 lblHouse32.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse32.setOpaque(true);

 lblHouse33.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse33.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse33.setText("7,5");
 lblHouse33.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse33.setOpaque(true);

 lblHouse34.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse34.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse34.setText("7,4");
 lblHouse34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse34.setOpaque(true);

 lblHouse35.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse35.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse35.setText("6,4");
 lblHouse35.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse35.setOpaque(true);

 lblHouse36.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse36.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse36.setText("5,4");
 lblHouse36.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse36.setOpaque(true);

 lblHouse37.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse37.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse37.setText("4,4");
 lblHouse37.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse37.setOpaque(true);

 lblHouse38.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse38.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse38.setText("4,3");
 lblHouse38.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse38.setOpaque(true);

 lblHouse39.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse39.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse39.setText("5,3");
 lblHouse39.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse39.setOpaque(true);

 lblHouse40.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse40.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse40.setText("6,3");
 lblHouse40.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse40.setOpaque(true);

 lblHouse41.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse41.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse41.setText("7,3");
 lblHouse41.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse41.setOpaque(true);

 lblHouse42.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse42.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse42.setText("7,2");
 lblHouse42.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse42.setOpaque(true);

 lblHouse43.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse43.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse43.setText("6,2");
 lblHouse43.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse43.setOpaque(true);

 lblHouse44.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse44.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse44.setText("5,2");
 lblHouse44.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse44.setOpaque(true);

 lblHouse45.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse45.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse45.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse45.setText("4,2");
 lblHouse45.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse45.setOpaque(true);

 lblHouse46.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse46.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse46.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse46.setText("4,1");
 lblHouse46.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse46.setOpaque(true);

 lblHouse47.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse47.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse47.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse47.setText("5,1");
 lblHouse47.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse47.setOpaque(true);

 lblHouse48.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse48.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse48.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse48.setText("6,1");
 lblHouse48.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse48.setOpaque(true);

 lblHouse49.setBackground(new java.awt.Color(0, 204, 51));
 lblHouse49.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
 lblHouse49.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblHouse49.setText("7,1");
 lblHouse49.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
 lblHouse49.setOpaque(true);

 lblNameP1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
 lblNameP1.setText("Player 1:");

 lblBalanceP1.setText("Current Balance: ");

 lblPropertiesTitleP1.setText("Properties Owned:");

 txtAreaHouseListP1.setEditable(false);
 txtAreaHouseListP1.setBackground(new java.awt.Color(240, 240, 240));
 txtAreaHouseListP1.setColumns(20);
 txtAreaHouseListP1.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
 txtAreaHouseListP1.setRows(5);
 jScrollPane1.setViewportView(txtAreaHouseListP1);

 javax.swing.GroupLayout pnlPlayerCard1Layout = new javax.swing.GroupLayout(pnlPlayerCard1);
 pnlPlayerCard1.setLayout(pnlPlayerCard1Layout);
 pnlPlayerCard1Layout.setHorizontalGroup(
     pnlPlayerCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(pnlPlayerCard1Layout.createSequentialGroup()
  .addContainerGap()
  .addGroup(pnlPlayerCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lblNameP1)
      .addComponent(lblBalanceP1)
      .addComponent(lblPropertiesTitleP1)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
  .addContainerGap(83, Short.MAX_VALUE))
 );
 pnlPlayerCard1Layout.setVerticalGroup(
     pnlPlayerCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(pnlPlayerCard1Layout.createSequentialGroup()
  .addContainerGap()
  .addComponent(lblNameP1)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
  .addComponent(lblBalanceP1)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
  .addComponent(lblPropertiesTitleP1)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
  .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
  .addContainerGap())
 );

 scrlPlayerCard1.setViewportView(pnlPlayerCard1);

 lblNameP2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
 lblNameP2.setText("Player 2:");

 lblBalanceP2.setText("Current Balance: ");

 lblPropertiesTitleP2.setText("Properties Owned:");

 txtAreaHouseListP2.setEditable(false);
 txtAreaHouseListP2.setBackground(new java.awt.Color(240, 240, 240));
 txtAreaHouseListP2.setColumns(20);
 txtAreaHouseListP2.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
 txtAreaHouseListP2.setRows(5);
 jScrollPane2.setViewportView(txtAreaHouseListP2);

 javax.swing.GroupLayout pnlPlayerCard2Layout = new javax.swing.GroupLayout(pnlPlayerCard2);
 pnlPlayerCard2.setLayout(pnlPlayerCard2Layout);
 pnlPlayerCard2Layout.setHorizontalGroup(
     pnlPlayerCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(pnlPlayerCard2Layout.createSequentialGroup()
  .addContainerGap()
  .addGroup(pnlPlayerCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lblNameP2)
      .addComponent(lblBalanceP2)
      .addComponent(lblPropertiesTitleP2)
      .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
  .addContainerGap(83, Short.MAX_VALUE))
 );
 pnlPlayerCard2Layout.setVerticalGroup(
     pnlPlayerCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(pnlPlayerCard2Layout.createSequentialGroup()
  .addContainerGap()
  .addComponent(lblNameP2)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
  .addComponent(lblBalanceP2)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
  .addComponent(lblPropertiesTitleP2)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
  .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
  .addContainerGap())
 );

 scrlPlayerCard2.setViewportView(pnlPlayerCard2);

 lblNameP3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
 lblNameP3.setText("Player 3:");

 lblBalanceP3.setText("Current Balance: ");

 lblPropertiesTitleP3.setText("Properties Owned:");

 txtAreaHouseListP3.setEditable(false);
 txtAreaHouseListP3.setBackground(new java.awt.Color(240, 240, 240));
 txtAreaHouseListP3.setColumns(20);
 txtAreaHouseListP3.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
 txtAreaHouseListP3.setRows(5);
 jScrollPane3.setViewportView(txtAreaHouseListP3);

 javax.swing.GroupLayout pnlPlayerCard3Layout = new javax.swing.GroupLayout(pnlPlayerCard3);
 pnlPlayerCard3.setLayout(pnlPlayerCard3Layout);
 pnlPlayerCard3Layout.setHorizontalGroup(
     pnlPlayerCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(pnlPlayerCard3Layout.createSequentialGroup()
  .addContainerGap()
  .addGroup(pnlPlayerCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lblNameP3)
      .addComponent(lblBalanceP3)
      .addComponent(lblPropertiesTitleP3)
      .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
  .addContainerGap(83, Short.MAX_VALUE))
 );
 pnlPlayerCard3Layout.setVerticalGroup(
     pnlPlayerCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(pnlPlayerCard3Layout.createSequentialGroup()
  .addContainerGap()
  .addComponent(lblNameP3)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
  .addComponent(lblBalanceP3)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
  .addComponent(lblPropertiesTitleP3)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
  .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
  .addContainerGap())
 );

 scrlPlayerCard3.setViewportView(pnlPlayerCard3);

 lblOutput.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
 lblOutput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
 lblOutput.setText("...");

 btnBuy.setText("Buy Property");
 btnBuy.addActionListener(new java.awt.event.ActionListener() {
     public void actionPerformed(java.awt.event.ActionEvent evt) {
  btnBuyActionPerformed(evt);
     }
 });

 btnSell.setText("Sell Property");
 btnSell.setEnabled(false);
 btnSell.addActionListener(new java.awt.event.ActionListener() {
     public void actionPerformed(java.awt.event.ActionEvent evt) {
  btnSellActionPerformed(evt);
     }
 });

 btnEndTurn.setText("End Turn");
 btnEndTurn.addActionListener(new java.awt.event.ActionListener() {
     public void actionPerformed(java.awt.event.ActionEvent evt) {
  btnEndTurnActionPerformed(evt);
     }
 });

 lblNameP4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
 lblNameP4.setText("Player 4:");

 lblBalanceP4.setText("Current Balance: ");

 lblPropertiesTitleP4.setText("Properties Owned:");

 txtAreaHouseListP4.setEditable(false);
 txtAreaHouseListP4.setBackground(new java.awt.Color(240, 240, 240));
 txtAreaHouseListP4.setColumns(20);
 txtAreaHouseListP4.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
 txtAreaHouseListP4.setRows(5);
 jScrollPane4.setViewportView(txtAreaHouseListP4);

 javax.swing.GroupLayout pnlPlayerCard4Layout = new javax.swing.GroupLayout(pnlPlayerCard4);
 pnlPlayerCard4.setLayout(pnlPlayerCard4Layout);
 pnlPlayerCard4Layout.setHorizontalGroup(
     pnlPlayerCard4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(pnlPlayerCard4Layout.createSequentialGroup()
  .addContainerGap()
  .addGroup(pnlPlayerCard4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(lblNameP4)
      .addComponent(lblBalanceP4)
      .addComponent(lblPropertiesTitleP4)
      .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
  .addContainerGap(83, Short.MAX_VALUE))
 );
 pnlPlayerCard4Layout.setVerticalGroup(
     pnlPlayerCard4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(pnlPlayerCard4Layout.createSequentialGroup()
  .addContainerGap()
  .addComponent(lblNameP4)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
  .addComponent(lblBalanceP4)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
  .addComponent(lblPropertiesTitleP4)
  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
  .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
  .addContainerGap())
 );

 scrlPlayerCard4.setViewportView(pnlPlayerCard4);

 javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
 getContentPane().setLayout(layout);
 layout.setHorizontalGroup(
     layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(layout.createSequentialGroup()
  .addGap(33, 33, 33)
  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
      .addComponent(scrlPlayerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(scrlPlayerCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
  .addGap(18, 18, 18)
  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(layout.createSequentialGroup()
       .addComponent(lblHouse46, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
       .addComponent(lblHouse45, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
       .addComponent(lblHouse38, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
       .addComponent(lblHouse37, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
       .addComponent(lblHouse30, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
       .addComponent(lblHouse29, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
       .addComponent(lblHouse22, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
   .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
       .addGroup(layout.createSequentialGroup()
    .addComponent(lblHouse47, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse44, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse39, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse36, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse31, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse28, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse23, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
       .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
    .addComponent(lblHouse48, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse43, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse40, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse35, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse32, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse27, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse24, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
       .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
    .addComponent(lblHouse49, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse42, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse41, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse34, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse33, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse26, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse25, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
       .addComponent(lblOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
   .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
       .addGroup(layout.createSequentialGroup()
    .addComponent(lblHouse3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse10, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse15, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse16, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse21, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
       .addGroup(layout.createSequentialGroup()
    .addComponent(lblHouse2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse11, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse14, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse17, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse20, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
       .addGroup(layout.createSequentialGroup()
    .addComponent(lblHouse1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse12, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse13, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse18, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(lblHouse19, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
      .addGroup(layout.createSequentialGroup()
   .addGap(27, 27, 27)
   .addComponent(btnBuy)
   .addGap(18, 18, 18)
   .addComponent(btnSell)
   .addGap(18, 18, 18)
   .addComponent(btnEndTurn)))
  .addGap(18, 18, 18)
  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(scrlPlayerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(scrlPlayerCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
  .addGap(33, 33, 33))
     .addGroup(layout.createSequentialGroup()
  .addContainerGap()
  .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
  .addContainerGap())
 );
 layout.setVerticalGroup(
     layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(layout.createSequentialGroup()
  .addContainerGap()
  .addComponent(lblTitle)
  .addGap(9, 9, 9)
  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
       .addComponent(scrlPlayerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addGroup(layout.createSequentialGroup()
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
        .addComponent(lblHouse1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse13, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse19, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse18, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
        .addComponent(lblHouse11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse17, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse20, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
        .addComponent(lblHouse21, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(lblHouse16, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
       .addComponent(lblHouse22, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse29, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse30, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse37, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse38, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse45, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse46, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
   .addComponent(scrlPlayerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
   .addGap(35, 35, 35)))
  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
       .addComponent(lblHouse31, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse23, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse28, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse39, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse36, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse44, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse47, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
       .addComponent(lblHouse24, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse27, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse32, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse35, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse40, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse43, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse48, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
       .addComponent(lblHouse25, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse26, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse33, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse34, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse41, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse42, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
       .addComponent(lblHouse49, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
   .addGap(18, 18, 18)
   .addComponent(lblOutput)
   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
       .addComponent(btnBuy)
       .addComponent(btnSell)
       .addComponent(btnEndTurn)))
      .addComponent(scrlPlayerCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(scrlPlayerCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
 );

 pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
        btnBuy.setEnabled(false);
        btnSell.setEnabled(false);

        //Opens the screen that allows the user to buy the property they want
        BuyPropertyApp open = new BuyPropertyApp();
        open.setVisible(true);
    }//GEN-LAST:event_btnBuyActionPerformed

    private void btnEndTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndTurnActionPerformed
        takeTax();
        int lastTurn = turn;
        if (turn != players.size()) {
            turn++;
        } else {
            turn = 1;
        }
        checkBankrupt(lastTurn);
        propertyPriceFactor();
        update(lastTurn);
        checkWin();
    }//GEN-LAST:event_btnEndTurnActionPerformed

    public void checkWin() {
        boolean playersFinished = true;
        if (players.size() != 1) {
            playersFinished = false;
        }

        boolean housesFinished = true;
        for (int i = 0; i < arrHouses.length; i++) {
            if (!(arrHouses[i].getSold())) {
                housesFinished = false;
            }
        }

        if (playersFinished) {
            JOptionPane.showMessageDialog(null, (players.get(0).getName() + " is the only player left! You win."), "Game Over", JOptionPane.ERROR_MESSAGE);
        } else if (housesFinished) {
            int P1Sum = 0;
            int P2Sum = 0;
            int P3Sum = 0;
            int P4Sum = 0;

            for (int i = 0; i < players.size(); i++) {
                int sumTemp = 0;

                for (int j = 0; j < players.get(i).getPropertyListArray().size(); j++) {
                    sumTemp += players.get(i).getPropertyListArray().get(j).getPrice();
                }

                if (players.get(i).getName().equals(PlayerSelectApp.txtPlayer1.getText())) {
                    P1Sum = sumTemp;
                } else if (players.get(i).getName().equals(PlayerSelectApp.txtPlayer2.getText())) {
                    P2Sum = sumTemp;
                } else if (players.get(i).getName().equals(PlayerSelectApp.txtPlayer3.getText())) {
                    P3Sum = sumTemp;
                } else {
                    P4Sum = sumTemp;
                }
            }

            if (P1Sum > P2Sum && P1Sum > P3Sum && P1Sum > P4Sum) {
                JOptionPane.showMessageDialog(null, ("Player 1 is the winner! With a balance of $" + x.format(players.get(0).getBalance())), "Game Over", JOptionPane.ERROR_MESSAGE);
            } else if (P2Sum > P1Sum && P2Sum > P3Sum && P2Sum > P4Sum) {
                JOptionPane.showMessageDialog(null, ("Player 2 is the winner! With a balance of $" + x.format(players.get(1).getBalance())), "Game Over", JOptionPane.ERROR_MESSAGE);
            } else if (P3Sum > P1Sum && P3Sum > P2Sum && P3Sum > P4Sum) {
                JOptionPane.showMessageDialog(null, ("Player 3 is the winner! With a balance of $" + x.format(players.get(2).getBalance())), "Game Over", JOptionPane.ERROR_MESSAGE);
            } else if (P4Sum > P1Sum && P4Sum > P3Sum && P4Sum > P2Sum) {
                JOptionPane.showMessageDialog(null, ("Player 4 is the winner! With a balance of $" + x.format(players.get(3).getBalance())), "Game Over", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "There was a tie in between 2 players. No one wins!", "Game Over", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (playersFinished || housesFinished) {
            btnBuy.setEnabled(false);
            btnSell.setEnabled(false);
            btnEndTurn.setEnabled(false);
        }
    }

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellActionPerformed
        btnBuy.setEnabled(false);

        SellPropertyApp open = new SellPropertyApp();
        open.setVisible(true);
    }//GEN-LAST:event_btnSellActionPerformed

    public void propertyPriceFactor() {
        int randNum;

        // 50% chance of the house's price changing. If it changes, the specific House variable's price information is changed
        for (int i = 0; i < arrHouses.length; i++) {
            if (arrHouses[i].getSold()) {
                randNum = (int) (Math.random() * 100) + 1;
                randNum -= 50;
                if (randNum > 0) {
                    arrHouses[i].setPrice(arrHouses[i].getPrice() * arrHouses[i].getPriceFactor());
                }
            }
        }
    }
    
     public void close () {
        WindowEvent winClosingEvent = new WindowEvent (this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    public void checkBankrupt(int lastTurn) {
        // Determines if the player who's turn it was has a balance under $0, and makes their screen invisible
        if (players.get(lastTurn - 1).getBalance() < 0) {
            //Show an error dialog that displays the message, 'alert':
            JOptionPane.showMessageDialog(null, (players.get(lastTurn - 1).getName() + " has been kicked out due to bankruptcy."), "Sad News",
                    JOptionPane.ERROR_MESSAGE);
            if (players.size () == 2)
            close ();
            
            if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer1.getText())) {
                scrlPlayerCard1.setVisible(false);
            } else if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer2.getText())) {
                scrlPlayerCard2.setVisible(false);
            } else if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer3.getText())) {
                scrlPlayerCard3.setVisible(false);
            } else {
                scrlPlayerCard4.setVisible(false);
            }

            // Based on which player was kicked, all of his/her properties are marked as not sold and available to the rest of the players
            for (int i = 0; i < players.get(lastTurn - 1).getPropertyListArray().size(); i++) {
                int pos = -1;
                for (int j = 0; j < coordinates.length; j++) {
                    if (players.get(lastTurn - 1).getPropertyListArray().get(i).getCoordinates() == coordinates[j]) {
                        pos = j;
                    }
                }

                players.get(lastTurn - 1).getPropertyListArray().get(i).setSold(false);

                players.get(lastTurn - 1).getPropertyListArray().remove(pos);

                int labelNum = getLabel(pos);

                if (labelNum == 1) {
                    GameScreenApp.lblHouse1.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 2) {
                    GameScreenApp.lblHouse2.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 3) {
                    GameScreenApp.lblHouse3.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 4) {
                    GameScreenApp.lblHouse4.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 5) {
                    GameScreenApp.lblHouse5.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 6) {
                    GameScreenApp.lblHouse6.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 7) {
                    GameScreenApp.lblHouse7.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 8) {
                    GameScreenApp.lblHouse8.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 9) {
                    GameScreenApp.lblHouse9.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 10) {
                    GameScreenApp.lblHouse10.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 11) {
                    GameScreenApp.lblHouse11.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 12) {
                    GameScreenApp.lblHouse12.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 13) {
                    GameScreenApp.lblHouse13.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 14) {
                    GameScreenApp.lblHouse14.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 15) {
                    GameScreenApp.lblHouse15.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 16) {
                    GameScreenApp.lblHouse16.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 17) {
                    GameScreenApp.lblHouse17.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 18) {
                    GameScreenApp.lblHouse18.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 19) {
                    GameScreenApp.lblHouse19.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 20) {
                    GameScreenApp.lblHouse20.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 21) {
                    GameScreenApp.lblHouse21.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 22) {
                    GameScreenApp.lblHouse22.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 23) {
                    GameScreenApp.lblHouse23.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 24) {
                    GameScreenApp.lblHouse24.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 25) {
                    GameScreenApp.lblHouse25.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 26) {
                    GameScreenApp.lblHouse26.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 27) {
                    GameScreenApp.lblHouse27.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 28) {
                    GameScreenApp.lblHouse28.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 29) {
                    GameScreenApp.lblHouse29.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 30) {
                    GameScreenApp.lblHouse30.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 31) {
                    GameScreenApp.lblHouse31.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 32) {
                    GameScreenApp.lblHouse32.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 33) {
                    GameScreenApp.lblHouse33.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 34) {
                    GameScreenApp.lblHouse34.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 35) {
                    GameScreenApp.lblHouse35.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 36) {
                    GameScreenApp.lblHouse36.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 37) {
                    GameScreenApp.lblHouse37.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 38) {
                    GameScreenApp.lblHouse38.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 39) {
                    GameScreenApp.lblHouse39.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 40) {
                    GameScreenApp.lblHouse40.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 41) {
                    GameScreenApp.lblHouse41.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 42) {
                    GameScreenApp.lblHouse42.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 43) {
                    GameScreenApp.lblHouse43.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 44) {
                    GameScreenApp.lblHouse44.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 45) {
                    GameScreenApp.lblHouse45.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 46) {
                    GameScreenApp.lblHouse46.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 47) {
                    GameScreenApp.lblHouse47.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else if (labelNum == 48) {
                    GameScreenApp.lblHouse48.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                } else {
                    GameScreenApp.lblHouse49.setBackground(players.get(lastTurn - 1).getPropertyListArray().get(i).getColor());
                }
            }
System.out.println (players.get(lastTurn-1));
            players.remove(players.get(lastTurn-1));
            checkWin ();  
        }
    }

    public void update(int lastTurn) {
        btnBuy.setEnabled(true);
        
        // Enables or disables the "Sell" button after checking if the next player has any properties or not
        if (players.get(turn - 1).getPropertyListArray().isEmpty()) {
            btnSell.setEnabled(false);
        } else {
            btnSell.setEnabled(true);
        }

        lblOutput.setText("It is " + players.get(turn - 1).getName() + "'s turn.");
        if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer1.getText())) {
            lblBalanceP1.setText("Current balance: " + x.format(players.get(lastTurn - 1).getBalance()));
        } else if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer2.getText())) {
            lblBalanceP2.setText("Current balance: " + x.format(players.get(lastTurn - 1).getBalance()));
        } else if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer3.getText())) {
            lblBalanceP3.setText("Current balance: " + x.format(players.get(lastTurn - 1).getBalance()));
        } else if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer4.getText())) {
            lblBalanceP4.setText("Current balance: " + x.format(players.get(lastTurn - 1).getBalance()));
        }

        updateList(lastTurn);
    }

    public void updateList(int lastTurn) {
        if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer1.getText())) {
            txtAreaHouseListP1.setText(players.get(lastTurn - 1).getPropertyListString());
        } else if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer2.getText())) {
            txtAreaHouseListP2.setText(players.get(lastTurn - 1).getPropertyListString());
        } else if (players.get(lastTurn - 1).getName().equals(PlayerSelectApp.txtPlayer3.getText())) {
            txtAreaHouseListP3.setText(players.get(lastTurn - 1).getPropertyListString());
        } else {
            txtAreaHouseListP4.setText(players.get(lastTurn - 1).getPropertyListString());
        }
    }

    public void takeTax() {
        int sum = 0;
        /*
         Pre: Program has a list of al the properties the player owns
         Post: The value of all properties is added and 5% of the sum is subtracted from the player's balance (tax)
         */
        for (int i = 0; i < players.get(turn - 1).getPropertyListArray().size(); i++) {
            sum += players.get(turn - 1).getPropertyListArray().get(i).getPrice();
        }
        int tax = (int) (sum * 0.05);
        players.get(turn - 1).setBalance((int) (players.get(turn - 1).getBalance() - tax));
    }

    public void startSetup() {
        setGrid();
        /*
         Pre: Program has details about each player (including how many players there are)
         Post: Each player's information is displayed on the game screen and the scroll panes of any players that
         aren't playing are set to be invisible
         */
        if (players.size() == 2) {
            scrlPlayerCard3.setVisible(false);
            scrlPlayerCard4.setVisible(false);

            lblNameP1.setText("Player 1: " + PlayerSelectApp.txtPlayer1.getText());
            lblBalanceP1.setText("Current Balance: " + x.format(players.get(0).getBalance()));
            txtAreaHouseListP1.setText("NONE");

            lblNameP2.setText("Player 2: " + PlayerSelectApp.txtPlayer2.getText());
            lblBalanceP2.setText("Current Balance: " + x.format(players.get(1).getBalance()));
            txtAreaHouseListP2.setText("NONE");
        } else if (players.size() == 3) {
            scrlPlayerCard4.setVisible(false);

            lblNameP1.setText("Player 1: " + PlayerSelectApp.txtPlayer1.getText());
            lblBalanceP1.setText("Current Balance: " + x.format(players.get(0).getBalance()));
            txtAreaHouseListP1.setText("NONE");

            lblNameP2.setText("Player 2: " + PlayerSelectApp.txtPlayer2.getText());
            lblBalanceP2.setText("Current Balance: " + x.format(players.get(1).getBalance()));
            txtAreaHouseListP2.setText("NONE");

            lblNameP3.setText("Player 3: " + PlayerSelectApp.txtPlayer3.getText());
            lblBalanceP3.setText("Current Balance: " + x.format(players.get(2).getBalance()));
            txtAreaHouseListP3.setText("NONE");
        } else {
            lblNameP1.setText("Player 1: " + PlayerSelectApp.txtPlayer1.getText());
            lblBalanceP1.setText("Current Balance: " + x.format(players.get(0).getBalance()));
            txtAreaHouseListP1.setText("NONE");

            lblNameP2.setText("Player 2: " + PlayerSelectApp.txtPlayer2.getText());
            lblBalanceP2.setText("Current Balance: " + x.format(players.get(1).getBalance()));
            txtAreaHouseListP2.setText("NONE");

            lblNameP3.setText("Player 3: " + PlayerSelectApp.txtPlayer3.getText());
            lblBalanceP3.setText("Current Balance: " + x.format(players.get(2).getBalance()));
            txtAreaHouseListP3.setText("NONE");

            lblNameP4.setText("Player 4: " + PlayerSelectApp.txtPlayer4.getText());
            lblBalanceP4.setText("Current Balance: " + x.format(players.get(3).getBalance()));
            txtAreaHouseListP4.setText("NONE");
        }
        lblOutput.setText("It is " + players.get(turn - 1).getName() + "'s turn");
    }

    public void setGrid() {
        int randPrice;
        double randFactor;
        Color c;
        /*
         Pre: An array (arrHouses) has been declared globally to hold 49 "House" variables
         Post: The array is initialized with 49 "House" variables, each of which are assigned:
         - A price between 3 million and 1 million (randomized)
         - A price factor between 0.5 and 1.5 (randomized)
         - A colour based on the random price factor
         */
        for (int i = 0; i < arrHouses.length; i++) {
            randPrice = (int) ((Math.random() * 20) + 10);
            randFactor = (double) ((Math.random() * 0.2) + 0.9);
            if (randFactor < 0.928) {
                c = Color.GREEN;
            } else if (randFactor < 00.956) {
                c = new Color(200, 208, 240);
            } else if (randFactor < 0.984) {
                c = Color.YELLOW;
            } else if (randFactor < 1.012) {
                c = Color.RED;
            } else if (randFactor < 1.04) {
                c = Color.MAGENTA;
            } else if (randFactor < 1.068) {
                c = Color.ORANGE;
            } else if (randFactor < 1.088) { //The 2 highest price factors are rarer in comparison to the rest (9% and 7% chance instead of 13%)
                c = Color.PINK;
            } else {
                c = Color.CYAN;
            }

            House h = new House(coordinates[i], randPrice * 100000, randFactor, c, false);
            arrHouses[i] = h;
        }
        setColour();
    }

    public void setColour() {
        /*
         Pre: 49 houses have been assigned a price factor (which in turn, gave them a colour)
         Post: The price factor will be used to get them in order from lowest price factor to highest price factor
         (user doesn't know this) using bubble sort. This order will then be used to organize them colour-wise 
         into blocks on the game board.
         */
        for (int i = 0; i < arrHouses.length - 1; i++) {
            for (int j = 1; j < arrHouses.length - i; j++) {
                if (arrHouses[j - 1].getPriceFactor() > arrHouses[j].getPriceFactor()) {
                    //Swap Price Factor
                    double temp = arrHouses[j - 1].getPriceFactor();
                    arrHouses[j - 1].setPriceFactor(arrHouses[j].getPriceFactor());
                    arrHouses[j].setPriceFactor(temp);
                    //Swap Colour
                    Color temp2 = arrHouses[j - 1].getColor();
                    arrHouses[j - 1].setColor(arrHouses[j].getColor());
                    arrHouses[j].setColor(temp2);
                }
            }
        }

        lblHouse1.setBackground(arrHouses[0].getColor());
        lblHouse2.setBackground(arrHouses[1].getColor());
        lblHouse3.setBackground(arrHouses[2].getColor());
        lblHouse4.setBackground(arrHouses[3].getColor());
        lblHouse5.setBackground(arrHouses[4].getColor());
        lblHouse6.setBackground(arrHouses[5].getColor());
        lblHouse7.setBackground(arrHouses[6].getColor());
        lblHouse8.setBackground(arrHouses[7].getColor());
        lblHouse9.setBackground(arrHouses[8].getColor());
        lblHouse10.setBackground(arrHouses[9].getColor());
        lblHouse11.setBackground(arrHouses[10].getColor());
        lblHouse12.setBackground(arrHouses[11].getColor());
        lblHouse13.setBackground(arrHouses[12].getColor());
        lblHouse14.setBackground(arrHouses[13].getColor());
        lblHouse15.setBackground(arrHouses[14].getColor());
        lblHouse16.setBackground(arrHouses[15].getColor());
        lblHouse17.setBackground(arrHouses[16].getColor());
        lblHouse18.setBackground(arrHouses[17].getColor());
        lblHouse19.setBackground(arrHouses[18].getColor());
        lblHouse20.setBackground(arrHouses[19].getColor());
        lblHouse21.setBackground(arrHouses[20].getColor());
        lblHouse22.setBackground(arrHouses[21].getColor());
        lblHouse23.setBackground(arrHouses[22].getColor());
        lblHouse24.setBackground(arrHouses[23].getColor());
        lblHouse25.setBackground(arrHouses[24].getColor());
        lblHouse26.setBackground(arrHouses[25].getColor());
        lblHouse27.setBackground(arrHouses[26].getColor());
        lblHouse28.setBackground(arrHouses[27].getColor());
        lblHouse29.setBackground(arrHouses[28].getColor());
        lblHouse30.setBackground(arrHouses[29].getColor());
        lblHouse31.setBackground(arrHouses[30].getColor());
        lblHouse32.setBackground(arrHouses[31].getColor());
        lblHouse33.setBackground(arrHouses[32].getColor());
        lblHouse34.setBackground(arrHouses[33].getColor());
        lblHouse35.setBackground(arrHouses[34].getColor());
        lblHouse36.setBackground(arrHouses[35].getColor());
        lblHouse37.setBackground(arrHouses[36].getColor());
        lblHouse38.setBackground(arrHouses[37].getColor());
        lblHouse39.setBackground(arrHouses[38].getColor());
        lblHouse40.setBackground(arrHouses[39].getColor());
        lblHouse41.setBackground(arrHouses[40].getColor());
        lblHouse42.setBackground(arrHouses[41].getColor());
        lblHouse43.setBackground(arrHouses[42].getColor());
        lblHouse44.setBackground(arrHouses[43].getColor());
        lblHouse45.setBackground(arrHouses[44].getColor());
        lblHouse46.setBackground(arrHouses[45].getColor());
        lblHouse47.setBackground(arrHouses[46].getColor());
        lblHouse48.setBackground(arrHouses[47].getColor());
        lblHouse49.setBackground(arrHouses[48].getColor());
    }

    public int getLabel(int pos) {
        /*
         Pre: Knows which coordinates correspond to whcih position in the array of Houses
         Post: Returns position in array
         */
        if (arrHouses[pos].getCoordinates() == 11) {
            return 1;
        } else if (arrHouses[pos].getCoordinates() == 21) {
            return 2;
        } else if (arrHouses[pos].getCoordinates() == 31) {
            return 3;
        } else if (arrHouses[pos].getCoordinates() == 32) {
            return 4;
        } else if (arrHouses[pos].getCoordinates() == 22) {
            return 5;
        } else if (arrHouses[pos].getCoordinates() == 12) {
            return 6;
        } else if (arrHouses[pos].getCoordinates() == 13) {
            return 7;
        } else if (arrHouses[pos].getCoordinates() == 23) {
            return 8;
        } else if (arrHouses[pos].getCoordinates() == 33) {
            return 9;
        } else if (arrHouses[pos].getCoordinates() == 34) {
            return 10;
        } else if (arrHouses[pos].getCoordinates() == 24) {
            return 11;
        } else if (arrHouses[pos].getCoordinates() == 14) {
            return 12;
        } else if (arrHouses[pos].getCoordinates() == 15) {
            return 13;
        } else if (arrHouses[pos].getCoordinates() == 25) {
            return 14;
        } else if (arrHouses[pos].getCoordinates() == 35) {
            return 15;
        } else if (arrHouses[pos].getCoordinates() == 36) {
            return 16;
        } else if (arrHouses[pos].getCoordinates() == 26) {
            return 17;
        } else if (arrHouses[pos].getCoordinates() == 16) {
            return 18;
        } else if (arrHouses[pos].getCoordinates() == 17) {
            return 19;
        } else if (arrHouses[pos].getCoordinates() == 27) {
            return 20;
        } else if (arrHouses[pos].getCoordinates() == 37) {
            return 21;
        } else if (arrHouses[pos].getCoordinates() == 47) {
            return 22;
        } else if (arrHouses[pos].getCoordinates() == 57) {
            return 23;
        } else if (arrHouses[pos].getCoordinates() == 67) {
            return 24;
        } else if (arrHouses[pos].getCoordinates() == 77) {
            return 25;
        } else if (arrHouses[pos].getCoordinates() == 76) {
            return 26;
        } else if (arrHouses[pos].getCoordinates() == 66) {
            return 27;
        } else if (arrHouses[pos].getCoordinates() == 56) {
            return 28;
        } else if (arrHouses[pos].getCoordinates() == 46) {
            return 29;
        } else if (arrHouses[pos].getCoordinates() == 45) {
            return 30;
        } else if (arrHouses[pos].getCoordinates() == 55) {
            return 31;
        } else if (arrHouses[pos].getCoordinates() == 65) {
            return 32;
        } else if (arrHouses[pos].getCoordinates() == 75) {
            return 33;
        } else if (arrHouses[pos].getCoordinates() == 74) {
            return 34;
        } else if (arrHouses[pos].getCoordinates() == 64) {
            return 35;
        } else if (arrHouses[pos].getCoordinates() == 54) {
            return 36;
        } else if (arrHouses[pos].getCoordinates() == 44) {
            return 37;
        } else if (arrHouses[pos].getCoordinates() == 43) {
            return 38;
        } else if (arrHouses[pos].getCoordinates() == 53) {
            return 39;
        } else if (arrHouses[pos].getCoordinates() == 63) {
            return 40;
        } else if (arrHouses[pos].getCoordinates() == 73) {
            return 41;
        } else if (arrHouses[pos].getCoordinates() == 72) {
            return 42;
        } else if (arrHouses[pos].getCoordinates() == 62) {
            return 43;
        } else if (arrHouses[pos].getCoordinates() == 52) {
            return 44;
        } else if (arrHouses[pos].getCoordinates() == 42) {
            return 45;
        } else if (arrHouses[pos].getCoordinates() == 41) {
            return 46;
        } else if (arrHouses[pos].getCoordinates() == 51) {
            return 47;
        } else if (arrHouses[pos].getCoordinates() == 61) {
            return 48;
        } else {
            return 49;
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
 /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameScreenApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameScreenApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameScreenApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameScreenApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameScreenApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnBuy;
    public static javax.swing.JButton btnEndTurn;
    public static javax.swing.JButton btnSell;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblBalanceP1;
    private javax.swing.JLabel lblBalanceP2;
    private javax.swing.JLabel lblBalanceP3;
    private javax.swing.JLabel lblBalanceP4;
    public static javax.swing.JLabel lblHouse1;
    public static javax.swing.JLabel lblHouse10;
    public static javax.swing.JLabel lblHouse11;
    public static javax.swing.JLabel lblHouse12;
    public static javax.swing.JLabel lblHouse13;
    public static javax.swing.JLabel lblHouse14;
    public static javax.swing.JLabel lblHouse15;
    public static javax.swing.JLabel lblHouse16;
    public static javax.swing.JLabel lblHouse17;
    public static javax.swing.JLabel lblHouse18;
    public static javax.swing.JLabel lblHouse19;
    public static javax.swing.JLabel lblHouse2;
    public static javax.swing.JLabel lblHouse20;
    public static javax.swing.JLabel lblHouse21;
    public static javax.swing.JLabel lblHouse22;
    public static javax.swing.JLabel lblHouse23;
    public static javax.swing.JLabel lblHouse24;
    public static javax.swing.JLabel lblHouse25;
    public static javax.swing.JLabel lblHouse26;
    public static javax.swing.JLabel lblHouse27;
    public static javax.swing.JLabel lblHouse28;
    public static javax.swing.JLabel lblHouse29;
    public static javax.swing.JLabel lblHouse3;
    public static javax.swing.JLabel lblHouse30;
    public static javax.swing.JLabel lblHouse31;
    public static javax.swing.JLabel lblHouse32;
    public static javax.swing.JLabel lblHouse33;
    public static javax.swing.JLabel lblHouse34;
    public static javax.swing.JLabel lblHouse35;
    public static javax.swing.JLabel lblHouse36;
    public static javax.swing.JLabel lblHouse37;
    public static javax.swing.JLabel lblHouse38;
    public static javax.swing.JLabel lblHouse39;
    public static javax.swing.JLabel lblHouse4;
    public static javax.swing.JLabel lblHouse40;
    public static javax.swing.JLabel lblHouse41;
    public static javax.swing.JLabel lblHouse42;
    public static javax.swing.JLabel lblHouse43;
    public static javax.swing.JLabel lblHouse44;
    public static javax.swing.JLabel lblHouse45;
    public static javax.swing.JLabel lblHouse46;
    public static javax.swing.JLabel lblHouse47;
    public static javax.swing.JLabel lblHouse48;
    public static javax.swing.JLabel lblHouse49;
    public static javax.swing.JLabel lblHouse5;
    public static javax.swing.JLabel lblHouse6;
    public static javax.swing.JLabel lblHouse7;
    public static javax.swing.JLabel lblHouse8;
    public static javax.swing.JLabel lblHouse9;
    private javax.swing.JLabel lblNameP1;
    private javax.swing.JLabel lblNameP2;
    private javax.swing.JLabel lblNameP3;
    private javax.swing.JLabel lblNameP4;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblPropertiesTitleP1;
    private javax.swing.JLabel lblPropertiesTitleP2;
    private javax.swing.JLabel lblPropertiesTitleP3;
    private javax.swing.JLabel lblPropertiesTitleP4;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlPlayerCard1;
    private javax.swing.JPanel pnlPlayerCard2;
    private javax.swing.JPanel pnlPlayerCard3;
    private javax.swing.JPanel pnlPlayerCard4;
    private javax.swing.JScrollPane scrlPlayerCard1;
    private javax.swing.JScrollPane scrlPlayerCard2;
    private javax.swing.JScrollPane scrlPlayerCard3;
    private javax.swing.JScrollPane scrlPlayerCard4;
    private javax.swing.JTextArea txtAreaHouseListP1;
    private javax.swing.JTextArea txtAreaHouseListP2;
    private javax.swing.JTextArea txtAreaHouseListP3;
    private javax.swing.JTextArea txtAreaHouseListP4;
    // End of variables declaration//GEN-END:variables
}

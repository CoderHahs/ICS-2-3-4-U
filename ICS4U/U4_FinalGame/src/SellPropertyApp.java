
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.text.DecimalFormat;
import java.util.StringTokenizer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Saksham
 */
public class SellPropertyApp extends javax.swing.JFrame {

    static int coordinates;
    static int pos = -1;  //Used to keep track of which House in the array of Houses the user is currently dealing with

    DecimalFormat x = new DecimalFormat("##,###,###.##");

    public SellPropertyApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancel = new javax.swing.JButton();
        btnSellProperty = new javax.swing.JButton();
        txtCoordinates = new javax.swing.JTextField();
        btnChoose = new javax.swing.JButton();
        lblPropertyCost = new javax.swing.JLabel();
        lblBuy = new javax.swing.JLabel();
        lblCoordinates = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCancel.setText("Cancel");
        btnCancel.setEnabled(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSellProperty.setText("Just do it!");
        btnSellProperty.setEnabled(false);
        btnSellProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellPropertyActionPerformed(evt);
            }
        });

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        lblPropertyCost.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPropertyCost.setText("The cost of the property is:");

        lblBuy.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblBuy.setText("Are you sure you want to sell this property?");

        lblCoordinates.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCoordinates.setText("Input Coordinates of Property (x,y):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCoordinates)
                        .addGap(18, 18, 18)
                        .addComponent(txtCoordinates))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChoose)
                            .addComponent(lblPropertyCost)
                            .addComponent(lblBuy)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSellProperty)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel)))
                        .addGap(0, 53, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCoordinates)
                    .addComponent(txtCoordinates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChoose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPropertyCost)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBuy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSellProperty)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void close() {
        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    public int getLabel() {
        /*
         Pre: Knows which coordinates correspond to whcih position in the array of Houses
         Post: Returns position in array
         */
        if (GameScreenApp.arrHouses[pos].getCoordinates() == 11) {
            return 1;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 21) {
            return 2;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 31) {
            return 3;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 32) {
            return 4;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 22) {
            return 5;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 12) {
            return 6;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 13) {
            return 7;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 23) {
            return 8;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 33) {
            return 9;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 34) {
            return 10;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 24) {
            return 11;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 14) {
            return 12;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 15) {
            return 13;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 25) {
            return 14;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 35) {
            return 15;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 36) {
            return 16;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 26) {
            return 17;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 16) {
            return 18;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 17) {
            return 19;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 27) {
            return 20;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 37) {
            return 21;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 47) {
            return 22;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 57) {
            return 23;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 67) {
            return 24;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 77) {
            return 25;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 76) {
            return 26;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 66) {
            return 27;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 56) {
            return 28;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 46) {
            return 29;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 45) {
            return 30;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 55) {
            return 31;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 65) {
            return 32;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 75) {
            return 33;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 74) {
            return 34;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 64) {
            return 35;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 54) {
            return 36;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 44) {
            return 37;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 43) {
            return 38;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 53) {
            return 39;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 63) {
            return 40;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 73) {
            return 41;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 72) {
            return 42;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 62) {
            return 43;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 52) {
            return 44;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 42) {
            return 45;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 41) {
            return 46;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 51) {
            return 47;
        } else if (GameScreenApp.arrHouses[pos].getCoordinates() == 61) {
            return 48;
        } else {
            return 49;
        }
    }

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        close();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSellPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellPropertyActionPerformed
        GameScreenApp.arrHouses[pos].setSold(false);

        /*
        Pre: Program knows the index (in arrHouses) of the property which is being dealt with
        Post: A new index is determined (playerPos) which tells the program which property is being dealt with in the player's Property List array
         */
        int playerPos = -1;
        for (int i = 0; i < GameScreenApp.players.get(GameScreenApp.turn - 1).getPropertyListArray().size(); i++) {
            if (GameScreenApp.players.get(GameScreenApp.turn - 1).getPropertyListArray().get(i).getCoordinates() == coordinates) {
                playerPos = i;
            }
        }

        GameScreenApp.players.get(GameScreenApp.turn - 1).getPropertyListArray().remove(playerPos);

        int labelNum = getLabel();

        // Sets the colour of the block which was just sold to its original colour
        if (labelNum == 1) {
            GameScreenApp.lblHouse1.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 2) {
            GameScreenApp.lblHouse2.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 3) {
            GameScreenApp.lblHouse3.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 4) {
            GameScreenApp.lblHouse4.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 5) {
            GameScreenApp.lblHouse5.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 6) {
            GameScreenApp.lblHouse6.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 7) {
            GameScreenApp.lblHouse7.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 8) {
            GameScreenApp.lblHouse8.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 9) {
            GameScreenApp.lblHouse9.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 10) {
            GameScreenApp.lblHouse10.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 11) {
            GameScreenApp.lblHouse11.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 12) {
            GameScreenApp.lblHouse12.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 13) {
            GameScreenApp.lblHouse13.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 14) {
            GameScreenApp.lblHouse14.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 15) {
            GameScreenApp.lblHouse15.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 16) {
            GameScreenApp.lblHouse16.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 17) {
            GameScreenApp.lblHouse17.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 18) {
            GameScreenApp.lblHouse18.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 19) {
            GameScreenApp.lblHouse19.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 20) {
            GameScreenApp.lblHouse20.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 21) {
            GameScreenApp.lblHouse21.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 22) {
            GameScreenApp.lblHouse22.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 23) {
            GameScreenApp.lblHouse23.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 24) {
            GameScreenApp.lblHouse24.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 25) {
            GameScreenApp.lblHouse25.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 26) {
            GameScreenApp.lblHouse26.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 27) {
            GameScreenApp.lblHouse27.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 28) {
            GameScreenApp.lblHouse28.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 29) {
            GameScreenApp.lblHouse29.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 30) {
            GameScreenApp.lblHouse30.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 31) {
            GameScreenApp.lblHouse31.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 32) {
            GameScreenApp.lblHouse32.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 33) {
            GameScreenApp.lblHouse33.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 34) {
            GameScreenApp.lblHouse34.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 35) {
            GameScreenApp.lblHouse35.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 36) {
            GameScreenApp.lblHouse36.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 37) {
            GameScreenApp.lblHouse37.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 38) {
            GameScreenApp.lblHouse38.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 39) {
            GameScreenApp.lblHouse39.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 40) {
            GameScreenApp.lblHouse40.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 41) {
            GameScreenApp.lblHouse41.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 42) {
            GameScreenApp.lblHouse42.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 43) {
            GameScreenApp.lblHouse43.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 44) {
            GameScreenApp.lblHouse44.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 45) {
            GameScreenApp.lblHouse45.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 46) {
            GameScreenApp.lblHouse46.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 47) {
            GameScreenApp.lblHouse47.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else if (labelNum == 48) {
            GameScreenApp.lblHouse48.setBackground(GameScreenApp.arrHouses[pos].getColor());
        } else {
            GameScreenApp.lblHouse49.setBackground(GameScreenApp.arrHouses[pos].getColor());
        }

        // Add house price to the player's balance
        GameScreenApp.players.get(GameScreenApp.turn - 1).setBalance((int) (GameScreenApp.players.get(GameScreenApp.turn - 1).getBalance() + GameScreenApp.arrHouses[pos].getPrice()));
        GameScreenApp.btnSell.setEnabled (false);
        close();
    }//GEN-LAST:event_btnSellPropertyActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        String input = txtCoordinates.getText();
        House arrHouses[] = GameScreenApp.arrHouses;
        // Checks to make sure input only has 3 characters (Input Validation - Step 1
        if (input.length() == 3) {
            try {
                Integer.parseInt(Character.toString(input.charAt(0)));
                Integer.parseInt(Character.toString(input.charAt(2)));
                if (Integer.parseInt(Character.toString(input.charAt(0))) > 0 && Integer.parseInt(Character.toString(input.charAt(0))) < 8 && Integer.parseInt(Character.toString(input.charAt(2))) > 0 && Integer.parseInt(Character.toString(input.charAt(0))) < 8 && input.charAt(1) == ',') {
                    /*
            Pre: Program has the inputted value (String)
            Post: Removes comma from in between and puts the 2 numbers together to form a coordinate (int)
                     */
                    StringTokenizer s = new StringTokenizer(input, ",");
                    coordinates = Integer.parseInt(s.nextToken() + s.nextToken());

                    // Finds the house in the array of Houses that the player wants to sell
                    for (int i = 0; i < arrHouses.length; i++) {
                        if (arrHouses[i].getCoordinates() == coordinates) {
                            pos = i;
                        }
                    }

                    boolean find = false;
                    for (int i = 0; i < GameScreenApp.players.get(GameScreenApp.turn - 1).getPropertyListArray().size(); i++) {
                        if (GameScreenApp.arrHouses[pos].getCoordinates() == GameScreenApp.players.get(GameScreenApp.turn - 1).getPropertyListArray().get(i).getCoordinates()) {
                            find = true;
                        }
                    }

                    if (!find) {
                        txtCoordinates.setText("You don't own this property.");
                    } else {
                        btnSellProperty.setEnabled(true);
                        btnCancel.setEnabled(true);
                        btnChoose.setEnabled(false);

                        lblPropertyCost.setText("The value of the property is: $" + x.format(arrHouses[pos].getPrice()));
                    }
                } else {
                    txtCoordinates.setText("Invalid Entry");
                }

            } catch (NumberFormatException e) {
                txtCoordinates.setText("Invalid Entry");
            }
        } else {
            txtCoordinates.setText("Invalid Entry");
        }
    }//GEN-LAST:event_btnChooseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellPropertyApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellPropertyApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellPropertyApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellPropertyApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SellPropertyApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnSellProperty;
    private javax.swing.JLabel lblBuy;
    private javax.swing.JLabel lblCoordinates;
    private javax.swing.JLabel lblPropertyCost;
    private javax.swing.JTextField txtCoordinates;
    // End of variables declaration//GEN-END:variables
}
